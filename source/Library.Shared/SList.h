#pragma once

#include <cstdint>

namespace FieaGameEngine
{
    template <typename T>
    class SList
    {
    public:

        /************************************************************************/
        /** Initializes an empty list.                                          */
        /************************************************************************/
        SList();

    //    /************************************************************************/
    //    /** Copy constructor that performs a deep copy of the list.             */
    //    /************************************************************************/
    //    SList(const SList<T>& rhs);

    //    /************************************************************************/
    //    /** Destructor that ensures all heap data allocated by this object is   */
    //    /** deleted.                                                            */
    //    /************************************************************************/
    //    ~SList();

        /************************************************************************/
        /** Inserts the given item before the front of the list.                */
        /************************************************************************/
        void PushFront(const T& item);

        /************************************************************************/
        /** Removes the first item in the list.                                 */
        /************************************************************************/
        void PopFront();

        /************************************************************************/
        /** Appends an item to the end of the list.                             */
        /************************************************************************/
        void PushBack(const T& item);

        /************************************************************************/
        /** Returns true if the list contains no items.                         */
        /************************************************************************/
        bool IsEmpty() const;

        /************************************************************************/
        /** Returns a reference to the first item in the list.                  */
        /************************************************************************/
        T& Front();

    //    /************************************************************************/
    //    /** Returns a reference to the first item in the list.                  */
    //    /************************************************************************/
    //    const T& Front() const;

    //    /************************************************************************/
    //    /** Returns a reference to the last item in the list.                   */
    //    /************************************************************************/
    //    T& Back();

    //    /************************************************************************/
    //    /** Returns a reference to the last item in the list.                   */
    //    /************************************************************************/
    //    const T& Back() const;

    //    /************************************************************************/
    //    /** Returns the number of items in the list.                            */
    //    /************************************************************************/
    //    std::uint32_t Size() const;

    //    /************************************************************************/
    //    /** Assignment operator implemented as a deep copy.                     */
    //    /************************************************************************/
    //    SList<T>& operator=(const Slist<T>& rhs); 

    //    /************************************************************************/
    //    /** Removes all items in the list.                                      */
    //    /************************************************************************/
    //    void Clear();

    private:

        struct Node
        {
            Node();
            Node(const T&    item, 
                 const Node* next);

            T mItem;
            Node* mNext;
        };

        Node* mFront;
        Node* mBack;
        std::uint32_t mSize;
    };
}

#include "SList.inl"
